=pod

=encoding utf8

=head1 NAME

FFX_CTX_new, FFX_CTX_free, FFX_init,
FFX_encrypt, FFX_decrypt, FFX_compute_luhn - Format-Preserving Encryption

=head1 SYNOPSIS

 #include <gmssl/ffx.h>

 FFX_CTX *FFX_CTX_new(void);
 void FFX_CTX_free(FFX_CTX *ctx);

 int FFX_init(FFX_CTX *ctx, const EVP_CIPHER *cipher,
              const unsigned char *key, int flag);
 int FFX_encrypt(FFX_CTX *ctx, const char *in, char *out, size_t iolen,
                 unsigned char *tweak, size_t tweaklen);
 int FFX_decrypt(FFX_CTX *ctx, const char *in, char *out, size_t iolen,
                 unsigned char *tweak, size_t tweaklen);

 int  FFX_compute_luhn(const char *in, size_t inlen);

=head1 DESCRIPTION

Applications should use the higher level functions
L<EVP_DigestInit(3)> etc. instead of calling the hash
functions directly.

SM3 (ShangMi#3 Hash Algorithm) is a cryptographic hash function with a
256 bit output.

sm3() computes the SM3 message digest of the B<n>
bytes at B<d> and places it in B<md> (which must have space for
SHA_DIGEST_LENGTH == 20 bytes of output). If B<md> is NULL, the digest
is placed in a static array. Note: setting B<md> to NULL is B<not thread safe>.

The following functions may be used if the message is not completely
stored in memory:

sm3_nit() initializes a B<sm3_ctx_t> structure.

sm3_update() can be called repeatedly with chunks of the message to
be hashed (B<len> bytes at B<data>).

sm3_final() places the message digest in B<md>, which must have space
for SM3_DIGEST_LENGTH == 32 bytes of output, and erases the B<sm3_ctx_t>.

=head1 RETURN VALUES

sm3_init(), sm3_update(), sm3_final(), sm3_compress() and sm3() return void.

=head1 CONFORMING TO

GM/T 0004-2012 SM3 Cryptogrpahic Hash Algorithm.

=head1 SEE ALSO

L<EVP_DigestInit(3)>

=head1 COPYRIGHT

Copyright 2014-2019 The GmSSL Project. All Rights Reserved.

Licensed under the GmSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<http://gmssl.org/license.html>.

=cut
