=pod

=encoding utf8

=head1 NAME

sms4_set_encrypt_key, sms4_set_decrypt_key,
sms4_encrypt, sms4_decrypt,
sms4_encrypt_init, sms4_encrypt_8blocks, sms4_encrypt_16blocks,
sms4_ecb_encrypt, sms4_cbc_encrypt,
sms4_cfb128_encrypt, sms4_ofb128_encrypt, sms4_ctr128_encrypt,
sms4_wrap_key, sms4_unwrap_key - SM4 Block Cipher



=head1 SYNOPSIS

 #include <gmssl/sms4.h>

 void sms4_set_encrypt_key(sms4_key_t *key, const unsigned char *user_key);
 void sms4_set_decrypt_key(sms4_key_t *key, const unsigned char *user_key);
 void sms4_encrypt(const unsigned char *in, unsigned char *out, const sms4_key_t *key);
 #define sms4_decrypt(in,out,key)  sms4_encrypt(in,out,key)

 void sms4_encrypt_init(sms4_key_t *key);
 void sms4_encrypt_8blocks(const unsigned char *in, unsigned char *out, const sms4_key_t *key);
 void sms4_encrypt_16blocks(const unsigned char *in, unsigned char *out, const sms4_key_t *key);

 void sms4_ecb_encrypt(const unsigned char *in, unsigned char *out,
	const sms4_key_t *key, int enc);
 void sms4_cbc_encrypt(const unsigned char *in, unsigned char *out,
	size_t len, const sms4_key_t *key, unsigned char *iv, int enc);
 void sms4_cfb128_encrypt(const unsigned char *in, unsigned char *out,
	size_t len, const sms4_key_t *key, unsigned char *iv, int *num, int enc);
 void sms4_ofb128_encrypt(const unsigned char *in, unsigned char *out,
	size_t len, const sms4_key_t *key, unsigned char *iv, int *num);
 void sms4_ctr128_encrypt(const unsigned char *in, unsigned char *out,
	size_t len, const sms4_key_t *key, unsigned char *iv,
	unsigned char ecount_buf[SMS4_BLOCK_SIZE], unsigned int *num);

 int sms4_wrap_key(sms4_key_t *key, const unsigned char *iv,
	unsigned char *out, const unsigned char *in, unsigned int inlen);
 int sms4_unwrap_key(sms4_key_t *key, const unsigned char *iv,
	unsigned char *out, const unsigned char *in, unsigned int inlen);

=head1 DESCRIPTION

Applications should use the higher level functions
L<EVP_DigestInit(3)> etc. instead of calling the hash
functions directly.

SM3 (ShangMi#3 Hash Algorithm) is a cryptographic hash function with a
256 bit output.

sm3() computes the SM3 message digest of the B<n>
bytes at B<d> and places it in B<md> (which must have space for
SHA_DIGEST_LENGTH == 20 bytes of output). If B<md> is NULL, the digest
is placed in a static array. Note: setting B<md> to NULL is B<not thread safe>.

The following functions may be used if the message is not completely
stored in memory:

sm3_nit() initializes a B<sm3_ctx_t> structure.

sm3_update() can be called repeatedly with chunks of the message to
be hashed (B<len> bytes at B<data>).

sm3_final() places the message digest in B<md>, which must have space
for SM3_DIGEST_LENGTH == 32 bytes of output, and erases the B<sm3_ctx_t>.

=head1 RETURN VALUES

sm3_init(), sm3_update(), sm3_final(), sm3_compress() and sm3() return void.

=head1 CONFORMING TO

GM/T 0004-2012 SM3 Cryptogrpahic Hash Algorithm.

=head1 SEE ALSO

L<EVP_DigestInit(3)>

=head1 COPYRIGHT

Copyright 2014-2019 The GmSSL Project. All Rights Reserved.

Licensed under the GmSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<http://gmssl.org/license.html>.

=cut
